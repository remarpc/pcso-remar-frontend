@page "/todo"
@inject IJSRuntime JS
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http.Headers;

<h1>Welcome to ToDo Page</h1>
<small>Here we will consume the new API</small>


@if (todoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Message</th>
                <th>Created</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todoList)
            {
                <tr>
                    <td>@todo.name</td>
                    <td>@todo.message</td>
                    <td>@todo.created</td>
                </tr>
            }
        </tbody>
    </table>
}

<input @bind="name" placeholder="type name" required />
<input @bind="message" placeholder="type message" required />
<br><br>
<button class="btn btn-primary" @onclick="AddToDo">Add To Do</button>
<button class="btn btn-primary" @onclick="InvokeJavaScript">Invoke JavaScript</button>
<button class="btn btn-primary" @onclick="DeleteAll">Delete All</button>

<MudButton Variant="Variant.Filled" Color="Color.Primary">Primary</MudButton>


@code {
    private int count = 0;
    private string jsonData;
    private List<ToDoItem> todoList;
    private string url = "https://pcso-remar-backend.azurewebsites.net/todoitems";

    private string name;
    private string message;

    private async void DeleteAll()
    {
        HttpClient httpClient = new HttpClient();
        await httpClient.DeleteAsync(url);
        await GetListAsync();
    }


    private async void AddToDo()
    {
        // Now we want to use our Web API
        count++;
        HttpClient httpClient = new HttpClient();

        ToDoItem todoItemPost = new ToDoItem
            {
                message = message,
                name = name,
                created = DateTime.Now
            };
        string myContent = JsonSerializer.Serialize(todoItemPost);
        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        ByteArrayContent byteContent = new ByteArrayContent(buffer);
        byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
        await httpClient.PostAsync(url, byteContent);

        await GetListAsync();
    }

    private async Task GetListAsync()
    {
        HttpClient httpClient = new HttpClient();

        jsonData = await httpClient.GetStringAsync(url);

        todoList = JsonSerializer.Deserialize<List<ToDoItem>>(jsonData);
        name = null;
        message = null;
        StateHasChanged();
    }

    private async void InvokeJavaScript()
    {
        await JS.InvokeVoidAsync("DeleteCache");
        await JS.InvokeVoidAsync("HelloAlert");
    }

    public class ToDoItem
    {
        public int id { get; set; }
        public string name { get; set; }
        public bool isComplete { get; set; }
        public string message { get; set; }
        public DateTime created { get; set; }
    }
}